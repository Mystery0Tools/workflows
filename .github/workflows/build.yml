name: Java CI with Gradle
on:
  push:
    branches:
      - master
  workflow_dispatch:
env:
  DOCKER_NAMESPACE: mystery0-server
  SERVICE_NAME: xhu-admin
  WAR_NAME: xhu-admin
  DEPLOY_NAMESPACE: server
  IMAGE_PULL_SECRETS: registry-key-server
jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - uses: actions/checkout@v4
      - name: 设置JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: chmod a+x gradlew
      - name: 构建项目
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: build -x test
      - name: 处理软件包
        run: |
          mkdir -p build/docker
          cp "build/libs/${{ env.WAR_NAME }}.war" "build/docker/build.war"
          cp script/docker/Dockerfile build/docker/Dockerfile
      - name: 生成镜像Tag以及配置文件
        run: |
          version_name=`git rev-parse --short=4 HEAD`
          date=`date "+%Y%m%d"`
          mkdir -p 'build/kubernetes'
          docker_image_tag="${{ secrets.REGISTRY_URL }}/${{ env.DOCKER_NAMESPACE }}/${{ env.SERVICE_NAME }}:${date}-${version_name}"
          sed "s/{{PROJECT_NAME}}/${{ env.SERVICE_NAME }}/g;s?{{DOCKER_IMAGE}}?$docker_image_tag?g;s/{{IMAGE_PULL_SECRETS}}/${{ env.IMAGE_PULL_SECRETS}}/g" template/deployment.yaml > build/kubernetes/deployment.yaml
          echo "docker_image_tag=$docker_image_tag" >> $GITHUB_ENV
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: 登录私有仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: build/docker
          file: build/docker/Dockerfile
          push: true
          tags: ${{ env.docker_image_tag }}
      - run: |
          wget -O deploy.sh "${{ secrets.APPLY_URL }}"
      - name: 上传部署文件
        uses: actions/upload-artifact@v4
        with:
          name: build-context
          path: |
            build/kubernetes/deployment.yaml
            template/config/application.yml
            template/config/logback-spring.xml
            template/config/context.xml
            template/config.yaml
            deploy.sh
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: 下载部署文件
        uses: actions/download-artifact@v4
      - name: 部署到k3s
        run: |
          cd build-context
          bash deploy.sh "${{ env.SERVICE_NAME }}" "${{ env.DEPLOY_NAMESPACE }}"
